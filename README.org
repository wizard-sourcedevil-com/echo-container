* Build, Test, and Deploy Container Image to Quay.io and OpenShift

** Build the Container Image
   #+BEGIN_SRC sh
   podman build -t echo-container:latest .
   #+END_SRC

** Tag the Container Image for Quay.io
   #+BEGIN_SRC sh
   podman tag echo-container:latest quay.io/rene_castro/echo:latest
   #+END_SRC

** Log in to Quay.io
   #+BEGIN_SRC sh
   podman login quay.io
   #+END_SRC

** Push the Container Image to Quay.io
   #+BEGIN_SRC sh
   podman push quay.io/rene_castro/echo:latest
   #+END_SRC

** Update ImageStream to Reference the Latest Image
   Ensure the OpenShift ImageStream is updated to use the latest image. This is necessary if the deployment is triggered by an ImageStream.

   Update the ImageStream with the latest tag:
   #+BEGIN_SRC sh
   oc tag quay.io/rene_castro/echo:latest echo-app:latest -n green
   #+END_SRC

   Verify the ImageStream:
   #+BEGIN_SRC sh
   oc describe imagestream echo-app -n green
   #+END_SRC

** Update OpenShift Deployment
   If the deployment doesnâ€™t automatically update after updating the ImageStream, manually update the image and restart the deployment:

   #+BEGIN_SRC sh
   oc set image deployment/echo-app echo-app=quay.io/rene_castro/echo:latest --record -n green
   oc rollout restart deployment/echo-app -n green
   oc rollout status deployment/echo-app -n green
   #+END_SRC

** Ensure OpenShift Always Pulls the Latest Image
   To prevent caching issues, configure the deployment to always pull the latest image:

   #+BEGIN_SRC sh
   oc patch deployment echo-app -p '{"spec":{"template":{"spec":{"containers":[{"name":"echo-app","imagePullPolicy":"Always"}]}}}}' -n green
   #+END_SRC

** Expose the Service
   #+BEGIN_SRC sh
   oc expose deployment echo-app --port=8080 --target-port=8080
   #+END_SRC

** Create and Apply Ingress Resource
   Use an Ingress resource to route traffic based on paths under the same host.

   Example ingress.yaml:
   #+BEGIN_SRC yaml
   apiVersion: networking.k8s.io/v1
   kind: Ingress
   metadata:
     annotations:
       nginx.ingress.kubernetes.io/rewrite-target: /
     name: multi-service-ingress
     namespace: green
   spec:
     rules:
     - host: <your-domain>
       http:
         paths:
         - path: /echo
           pathType: Prefix
           backend:
             service:
               name: echo-app
               port:
                 number: 8080
         - path: /another
           pathType: Prefix
           backend:
             service:
               name: another-service
               port:
                 number: 8080
   #+END_SRC

   Apply the Ingress resource:
   #+BEGIN_SRC sh
   oc apply -f ingress.yaml
   oc get ingress
   #+END_SRC

** Test the Running Container
   #+BEGIN_SRC sh
   curl http://<your-domain>/echo
   curl http://<your-domain>/another
   #+END_SRC

* entrypoint.sh Script
   #+BEGIN_SRC bash
   # filepath: /c:/Short/sourcedevil/rinzler/others/echo-container/entrypoint.sh
   #!/bin/bash

   # Variable to store the last request details
   LAST_REQUEST="No requests received yet."

   # Function to handle HTTP requests
   handle_request() {
     REQUEST_DETAILS="Path: $REQUEST_URI\nHeaders:\n$(env)"
     echo -e "HTTP/1.1 200 OK\n\nHello World\n\n$REQUEST_DETAILS"
     echo -e "Request received:\n$REQUEST_DETAILS" >&2
     LAST_REQUEST=$REQUEST_DETAILS
   }

   # Start the HTTP server in the background
   socat TCP-LISTEN:8080,reuseaddr,fork SYSTEM:'handle_request' &

   # Read the environment variable
   # Infinite loop for the ECHO_NAMESPACE environment variable
   while true; do
     echo "ECHO_NAMESPACE AND HTTP: $ECHO_NAMESPACE"
     echo -e "Last request details:\n$LAST_REQUEST"
     sleep 25
   done
   #+END_SRC
